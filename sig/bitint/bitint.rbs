module BitInt
  class OutOfBoundError < Error
    attr_reader integer: Integer

    attr_reader range: untyped

    def initialize: (untyped integer, untyped range) -> void
  end

  class BitInt < Numeric
    self.@bits: Integer
    self.@signed: bool
    MIN: instance
    MAX: instance
    BITS: Integer
    MASK: Integer
    ZERO: instance
    ONE: instance

    def self.in_bounds?: (Integer integer) -> bool
    def self.U: (Integer bits) -> class
    def self.I: (Integer bits) -> class
    def self.[]: (Integer bits, ?signed: bool) -> class
    def self.signed?: () -> bool
    def self.unsigned?: () -> bool
    def self.mask: (Integer int) -> untyped
    def self.setup!: (Integer bits, bool signed) -> void
    def self.inspect: () -> String
    alias self.to_s self.inspect

    @int: Integer
    def initialize: (Integer int, ?wrap: bool) -> void
    def ==: (Object rhs) -> bool

    def to_i: () -> Integer
    alias to_int to_i
    def to_f: () -> Float
    def to_s: (?Integer? base) -> String
    alias inspect to_s

    def hex: () -> String
    def oct: () -> String
    def bin: () -> String

    def -@: () -> BitInt
    def ~: () -> BitInt
    def []: (int idx) -> Integer?
    def <=>: (Object rhs) -> Integer?
    def +: (_ToI rhs) -> BitInt
    def -: (_ToI rhs) -> BitInt
    def /: (_ToI rhs) -> BitInt
    def *: (_ToI rhs) -> BitInt
    def %: (_ToI rhs) -> BitInt
    def **: (_ToI rhs) -> BitInt
    def <<: (_ToI rhs) -> BitInt
    def >>: (_ToI rhs) -> BitInt
    def &: (_ToI rhs) -> BitInt
    def |: (_ToI rhs) -> BitInt
    def ^: (_ToI rhs) -> BitInt
    def integer?: () -> true
  end
end
