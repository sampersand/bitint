module BitInt
  # Creates a new unsigned +BitInt::Base+ class.
  #
  # This is just a helper method that wraps +Base.create+
  #
  # === Example
  #   puts BitInt::U(16)::MAX #=> 65535
  def self?.U: (untyped bits) -> untyped

  alias unsigned U

  # Creates a new signed +BitInt::Base+ class.
  #
  # This is just a helper method that wraps +Base.create+
  #
  # === Example
  #   puts BitInt::I(16)::MAX #=> 32767
  def self?.I: (untyped bits) -> untyped

  alias signed I

  alias S I

  # Creates a new +BitInt::Base+ class.
  #
  # This is just a helper method that wraps +Base.create+
  #
  # === Example
  #   puts BitInt[8]::MAX #=> 255
  #   puts BitInt[8, signed: false]::MAX #=> 255
  #   puts BitInt[8, signed: true]::MAX #=> 127
  def self?.[]: (untyped bits, ?signed: bool) -> untyped
end
