# Generated from lib/bitint/bitint.rb with RBS::Inline

module BitInt
  # Helper to create new unsigned {BitInt::Base} classes.
  #
  # This method just wraps {Base.create}
  #
  # @param bits [Integer] number of bits; must be nonzero
  # @return [subclass of Base] a +Class+ that inherits from +Base+
  #
  # === Example
  #   puts BitInt::U(16)::MAX #=> 65535
  #
  # @rbs (Integer) -> untyped
  def self?.U: (Integer) -> untyped

  alias unsigned U

  # Helper to create new signed {BitInt::Base} classes.
  #
  # This method just wraps {Base.create}
  #
  # @param bits [Integer] number of bits; must be nonzero
  # @return     [subclass of Base] a +Class+ that inherits from +Base+
  #
  # === Example
  #   puts BitInt::I(16)::MAX #=> 32767
  #
  # @rbs (Integer) -> untyped
  def self?.I: (Integer) -> untyped

  alias signed I

  alias S I

  # Helper to create new {BitInt::Base} classes.
  #
  # This method just wraps {Base.create}.
  #
  # @param bits   [Integer] number of bits; must be nonzero
  # @param signed [bool] whether the subclass should be signed
  # @return       [subclass of Base] a +Class+ that inherits from +Base+
  #
  # === Example
  #   puts BitInt[9]::MAX #=> 511
  #   puts BitInt[9, signed: false]::MAX #=> 511
  #   puts BitInt[9, signed: true]::MAX #=> 255
  #
  # @rbs (Integer, ?signed: bool) -> untyped
  def self?.[]: (Integer, ?signed: bool) -> untyped
end
